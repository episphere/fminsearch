// catalog of functions
//______________________________________________________
// logistic
function logistic(x,P){
    return x.map(
        xi => 1 / (1 + Math.exp(-(P[0] + (P[1] * xi))))
    )
}
// test data
logistic.test={
    x: [...Array(101)].map((_,i)=>(i)/10)
}
logistic.test.y=logistic(logistic.test.x,[-10,3]).map(xi=>(xi+Math.random()*0.1-0.05).toString().slice(0,6))
// initial parameters
logistic.parms=[...Array(2)].map(_=>Math.random()) // random initial parameters

//______________________________________________________
// rational
function rational(x,P){
    return x.map(
		xi => P[0] + 1 / (1/(P[1]*(xi-P[2])) + 1/P[3])
    )
}
// test data
rational.test={
    x: [32,37,42,47,52,57,62,67,72,77,82,87,92],
    y: [749,1525,1947,2201,2380,2537,2671,2758,2803,2943,3007,2979,2992]
}
rational.parms=[100,30,10,5000]

//______________________________________________________
// see https://observablehq.com/d/8513735b65901705
let expLinearPredictors = [];
fetch('./expLinearPredictors.json')
    .then(x=>x.json())
    .then(x=>{expLinearPredictors=x})
//let expLinearPredictors await (await fetch('./expLinearPredictors.json')).json()
function weibullCdfModel(x, P) {
  console.log(P) // note console.log tipically adds less than 5% to compute time
  const k = P[0];
  const logb = P[1];
  const b = Math.exp(logb);
  const n = expLinearPredictors.length;
  return x.map((t) => {
    let sumSurv = 0;
    for (let i = 0; i < n; i++) {
      sumSurv += Math.exp(-b * expLinearPredictors[i] * Math.pow(t, k));
    }
    /*
    let sumSurv = expLinearPredictors
        .map(expLinearPredictor=>Math.exp(-b * expLinearPredictor * Math.pow(t, k)))
        .reduce((x1,x2)=>x1+x2)
    */
    const avgSurv = sumSurv / n;
    return 1 - avgSurv;
  });
}
weibullCdfModel.parms=[3,-12]
weibullCdfModel.test={
    x:[...Array(85)].map((_,i)=>i),
    y:[0,0,4.899998800045324e-7,4.899998800045324e-7,4.899998800045324e-7,4.899998800045324e-7,4.899998800045324e-7,4.899998800045324e-7,4.899998800045324e-7,4.899998800045324e-7,9.699995295875397e-7,9.699995295875397e-7,9.699995295875397e-7,0.000001439998963181921,0.000001439998963181921,0.000003289994587984957,0.000003739993006179887,0.000003739993006179887,0.000005549984598784974,0.000010159948387378215,0.00001611987007354987,0.000022089756017695805,0.00003367943283516528,0.00005179865840321263,0.0000798468120736251,0.000125782088769677,0.00019124171097217868,0.00026745422773954974,0.00037809850273851087,0.0005204845009233461,0.000710217675949365,0.0009467615382149352,0.0012211437963711713,0.0015238677326554484,0.0019415627238557054,0.0024365068867729933,0.003000908246348466,0.0036769533902641927,0.00440341640678843,0.005322117083907618,0.00668698196246531,0.008114210621179119,0.009598477702722041,0.011244561958650312,0.013109452676189237,0.015193762146851864,0.01739882161861228,0.019829193345400453,0.022381698604539757,0.024992533436728026,0.027735974272561914,0.03044555687810868,0.03317902006463114,0.03596677577326313,0.03891101687920684,0.04178438645116156,0.04480242969731263,0.04793540061874069,0.05119998981114415,0.054654055837560556,0.05828666876149391,0.06207729741750945,0.06603774147386554,0.07028147505919513,0.07448916513715309,0.0793180467507777,0.08405102499266137,0.08877069820791705,0.09356920973221772,0.09826907253356243,0.10307352683611148,0.10780716764907938,0.11260247580942151,0.11738837418676296,0.12225384986134369,0.12703344124604854,0.13184595598120485,0.1364943169463677,0.14108063312412367,0.1456046899799368,0.15004003448406178,0.15418367256678578,0.15836870283998095,0.16228198270344218,0.16613530833867818]
}
//______________________________________________________

// export models
export{
    logistic,
    rational,
    weibullCdfModel
}
